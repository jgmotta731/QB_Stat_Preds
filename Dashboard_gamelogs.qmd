---
title: "Dashboard Gamelogs"
author: "Jack Motta"
format: 
  html:
    embed-resources: true
    number-sections: true
    toc: true
editor: visual
---

```{r, warning=FALSE, message=FALSE}
#| message: false
#| warning: false
library(tidyverse)
library(plotly)
library(splines)
library(nflverse)
library(gsisdecoder)
library(rsample)
library(nflplotR)
library(NFLSimulatoR)
library(arrow)
library(caret)
library(png)
library(glmnet)
library(tidymodels)
library(finetune)
library(doParallel)
library(tictoc)
library(bslib)
library(reactable)
library(reactablefmtr)
library(rvest)
library(purrr)
library(lubridate)
library(robotstxt)
library(janitor)
library(polite)
library(nflreadr)
library(future)
library(future.callr)
library(VIM)
library(naniar)
library(tidymodels)
library(stacks)
library(httr)
library(furrr)
library(car)
library(corrplot)
library(zoo)
library(forecast)
library(factoextra)
library(janitor)
library(tidytext)
library(foreach)
library(rpart)
library(brms)
library(doFuture)
library(randomForest)
```

# Data Acquisition

## QB Stats

```{r, warning=FALSE, message=FALSE}
tic()
####################################### Offense Stats ##################################
# Load weekly offensive stats (and filter for only QBs)
offense <- load_player_stats(2017:most_recent_season(T), "offense") %>%
  filter(position == "QB") %>%
  select(-player_name, -position, -position_group) %>%
  rename(pass_attempts = attempts,
         rush_attempts = carries) %>%
  mutate(across(player_display_name, clean_player_names),
         across(c(recent_team, opponent_team), clean_team_abbrs)) %>%
  select(-starts_with("rec"))

###################################### Advanced Stats ##################################

##### Advanced Passing #####
adv_pass <- load_pfr_advstats(2018:most_recent_season(T), stat_type = "pass", 
                              summary_level = "week") %>%
  select(where(~ !all(is.na(.)))) %>%
  rename(player_display_name = pfr_player_name,
         recent_team = team,
         opponent_team = opponent,
         season_type = game_type) %>%
  mutate(
    across(c(player_display_name), clean_player_names),
    across(c(recent_team, opponent_team), clean_team_abbrs),
    season_type = case_when(
      season_type %in% c("CON", "DIV", "SB", "WC") ~ "POST",  # Replace playoff types with "POST"
      TRUE ~ season_type
      )
    )

##### Advanced Rushing #####
adv_rush <- load_pfr_advstats(2018:most_recent_season(T), stat_type = "rush", 
                              summary_level = "week") %>%
  select(where(~ !all(is.na(.)))) %>%
  rename(player_display_name = pfr_player_name,
         recent_team = team,
         opponent_team = opponent,
         season_type = game_type) %>%
  mutate(
    across(c(player_display_name), clean_player_names),
    across(c(recent_team, opponent_team), clean_team_abbrs),
    season_type = case_when(
      season_type %in% c("CON", "DIV", "SB", "WC") ~ "POST", # Make playoff games POST
      TRUE ~ season_type
      )
    )

##### Join Adv Pass and Adv Rush Stats #####
adv_qb_stats <- adv_pass %>%
  left_join(adv_rush, 
            by = c("player_display_name", "season", "game_id", "pfr_game_id", "week", 
                   "season_type", "recent_team", "opponent_team", "pfr_player_id")) %>%
  rename(rush_attempts = carries) %>%
  select(-pfr_game_id, -pfr_player_id)

#################################### Play-By-Play Data #################################
pbp_cores <- most_recent_season(roster = FALSE)-2017
cl <- makeCluster(pbp_cores)     # Set cores to number of seasons    
registerDoParallel(cl)           # Register the parallel backend
pbp_refresh <- load_pbp(2017:most_recent_season(roster = FALSE))
stopCluster(cl)                  # Stop the cluster
registerDoSEQ()                  # Reset to sequential processing
write_parquet(pbp_refresh, "pbp_refresh.parquet") # Efficient to read in
pbp <- read_parquet("pbp_refresh.parquet")

# Create game_info Contextual Data at the Game Level
game_info <- pbp %>%
  group_by(game_id, season, week) %>%
  summarize(
    # Use distinct game-level attributes
    home_team = first(home_team),
    away_team = first(away_team),
    season_type = first(season_type),
    stadium = first(stadium),
    roof = first(roof),
    surface = first(surface),
    game_date = first(game_date),
    home_coach = first(home_coach),
    away_coach = first(away_coach),
  ) %>%
  ungroup()

##################################### Birth Dates ######################################
birth_dates <- load_rosters(2017:most_recent_season(T)) %>%
  rename(player_display_name = full_name,
         recent_team = team) %>%
  filter(position == "QB") %>%
  mutate(across(player_display_name, clean_player_names),
         across(recent_team, clean_team_abbrs)) %>%
  select(player_display_name, birth_date, season, years_exp, entry_year, status)

###################################### ESPN QBR ########################################
espn_qbr <- load_espn_qbr(2017:most_recent_season(T), summary_type = "week") %>%
  filter(season >= 2017) %>%
  rename(player_display_name = name_display,
         week = game_week,
         epa_penalty = penalty,
         epa_sack = sack,
         epa_pass = pass,
         epa_run = run,
         opponent_team = opp_abb) %>%
  mutate(across(player_display_name, clean_player_names),
         across(opponent_team, clean_team_abbrs),
           # Update season_type column
         season_type = case_when(
           season_type == "Regular" ~ "REG",
           season_type == "Playoffs" ~ "POST",
           TRUE ~ season_type), # Keep other values unchanged
         # Update week column based on conditions
         week = case_when(
           # For seasons 2021 and greater
           season >= 2021 & week_text == "Wild Card" ~ 19,
           season >= 2021 & week_text == "Divisional Round" ~ 20,
           season >= 2021 & week_text == "Conference Championship" ~ 21,
           season >= 2021 & week_text == "Super Bowl" ~ 22,
           # For seasons less than 2021
           season < 2021 & week_text == "Wild Card" ~ 18,
           season < 2021 & week_text == "Divisional Round" ~ 19,
           season < 2021 & week_text == "Conference Championship" ~ 20,
           season < 2021 & week_text == "Super Bowl" ~ 21,
           # Keep week unchanged for other cases
           TRUE ~ week
           )) %>%
  select(season, week, qbr_total, epa_total, epa_pass, epa_run, epa_sack, epa_penalty, qbr_raw, player_display_name, qb_plays, pts_added, opponent_team)

espn_qbr_2 <- read.csv("qbr_missing_cleaned.csv") %>%
  filter(season >= 2017) %>%
  rename(player_display_name = name_display,
         recent_team = team_abb,
         epa_penalty = penalty,
         epa_sack = exp_sack,
         epa_pass = pass,
         epa_run = run,
         opponent_team = opp_abb) %>%
  select(season, week, qbr_total, epa_total, epa_pass, epa_run, epa_sack, epa_penalty, qbr_raw, player_display_name, qb_plays, pts_added, opponent_team) %>%
  mutate(across(player_display_name, clean_player_names),
         across(opponent_team, clean_team_abbrs))

espn_qbr_joined <- espn_qbr %>%
  full_join(espn_qbr_2, by = c("player_display_name", "season", "week", "qbr_total", "epa_pass", "epa_run", "epa_sack", "epa_penalty", "qbr_raw", "qb_plays", "pts_added", "epa_total", "opponent_team"))

################################# NextGen Passing ######################################
nextgen_pass <- load_nextgen_stats(2017:most_recent_season(T), stat_type = "passing") %>%
  filter(player_position == "QB") %>%
  filter(week != 0) %>%
  select(-player_last_name, -player_first_name, -player_short_name, -player_position) %>%
  rename(recent_team = team_abbr,
         pass_attempts = attempts,
         passing_yards = pass_yards,
         passing_tds = pass_touchdowns) %>%
  mutate(
    across(player_display_name, clean_player_names),
    recent_team = case_when(
    season == 2021 & player_display_name == "Kirk Cousins"    ~ "MIN",
    season == 2021 & player_display_name == "Aaron Rodgers"   ~ "GB",
    season == 2021 & player_display_name == "Justin Herbert"  ~ "LAC",
    season == 2021 & player_display_name == "Kyler Murray"    ~ "ARI",
    season == 2021 & player_display_name == "Russell Wilson"  ~ "SEA",
    season == 2021 & player_display_name == "Patrick Mahomes" ~ "KC",
    season == 2021 & player_display_name == "Lamar Jackson"   ~ "BAL",
    season == 2021 & player_display_name == "Tom Brady"       ~ "TB",
    TRUE ~ recent_team  # Retain original value if not in the list or not 2021
    ),
    across(recent_team, clean_team_abbrs))


################################# NextGen Rushing ######################################
nextgen_rush <- load_nextgen_stats(2017:most_recent_season(T), stat_type = "rushing") %>%
  filter(player_position == "QB") %>%
  filter(week != 0) %>%
  select(-player_last_name, -player_first_name, -player_short_name, -player_jersey_number, -player_position) %>%
  rename(recent_team = team_abbr,
         rushing_yards = rush_yards,
         rushing_tds = rush_touchdowns) %>%
  mutate(
    across(player_display_name, clean_player_names),
    across(recent_team, clean_team_abbrs))

##################################### Joining NextGen ##################################
nextgen_stats <- nextgen_pass %>%
  left_join(nextgen_rush, by = c("season", "season_type", "week", "player_display_name", 
                                 "recent_team", "player_gsis_id"))

#################################### Load Active Rosters ###############################
active_qbs <- load_rosters_weekly(2017:most_recent_season(T)) %>%  # Explicitly specify 2017:2024
  rename(recent_team = team,
         player_display_name = full_name,
         season_type = game_type) %>%
  filter(position == "QB") %>%  # Filter for quarterbacks
  filter(season == most_recent_season(T), status == "ACT") %>% # Find QBs active in 2024
  select(season, recent_team, status, player_display_name, week, season_type) %>%
  mutate(across(player_display_name, clean_player_names),
         across(recent_team, clean_team_abbrs)) %>%
  pull(player_display_name)

# Filtering to only include most recent active QBs
weekly_rosters <- load_rosters_weekly(2017:most_recent_season(T)) %>%
  rename(recent_team = team,
         player_display_name = full_name) %>%
  mutate(across(player_display_name, clean_player_names),
         across(recent_team, clean_team_abbrs)) %>%
  filter(position == "QB") %>%  # Filter for quarterbacks
  filter(status == "ACT") %>%  # Filter for active players
  filter(player_display_name %in% active_qbs) %>%  # Filter for QBs active in most recent season
  select(season, week, player_display_name, recent_team) %>%  # Select relevant columns
  arrange(season, week, player_display_name)
```

### Joining

```{r, warning=FALSE, message=FALSE}
qb_stats <- offense %>%
  left_join(espn_qbr_joined, by = c("player_display_name", "season", "week", "opponent_team")) %>%
  filter(player_display_name %in% active_qbs) %>%
  left_join(weekly_rosters, by = c("player_display_name", "season", "week")) %>%
  left_join(birth_dates, by = c("player_display_name", "season")) %>%
  left_join(nextgen_stats, by = c("player_display_name", "season", "week", "season_type", "recent_team")) %>%
  left_join(adv_qb_stats, by = c("player_display_name", "season", "week", "season_type", "opponent_team", "recent_team")) %>%
  mutate(rush_attempts = coalesce(rush_attempts.x, rush_attempts.y)) %>% # Fill `rush_attempts` NA values
  select(-rush_attempts.x, -rush_attempts.y) %>%  # Remove duplicate columns
  select(-player_jersey_number, -player_gsis_id, -targets, -target_share, -racr, -wopr,
         -air_yards_share, -special_teams_tds, -times_sacked) %>%
  rename(times_sacked = sacks) %>%
  left_join(game_info, by = c("game_id", "season", "week", "season_type")) %>%
  left_join(game_info, by = c("season", "week", "recent_team" = "home_team"), 
            suffix = c("", ".info")) %>%
  mutate(
    # Fill missing values from game_info where recent_team is home_team
    game_id = coalesce(game_id, game_id.info),
    away_team = coalesce(away_team, away_team.info),
    home_coach = coalesce(home_coach, home_coach.info),
    away_coach = coalesce(away_coach, away_coach.info),
    roof = coalesce(roof, roof.info),
    stadium = coalesce(stadium, stadium.info),
    surface = coalesce(surface, surface.info),
    game_date = coalesce(game_date, game_date.info)
  ) %>%
  # Drop the .info columns after filling in values
  select(-ends_with(".info"))
qb_stats <- qb_stats %>%
  left_join(game_info, by = c("season", "week", "recent_team" = "away_team"), 
            suffix = c("", ".info")) %>%
  mutate(
    # Fill remaining missing values from game_info where recent_team is away_team
    game_id = coalesce(game_id, game_id.info),
    home_team = coalesce(home_team, home_team.info),
    home_coach = coalesce(home_coach, home_coach.info),
    away_coach = coalesce(away_coach, away_coach.info),
    roof = coalesce(roof, roof.info),
    stadium = coalesce(stadium, stadium.info),
    surface = coalesce(surface, surface.info),
    game_date = coalesce(game_date, game_date.info),
  ) %>%
  # Remove extra columns with .info suffix
  select(-ends_with(".info")) %>%
  # Step 2: Coalesce all matching .x and .y columns
  mutate(
    across(
    .cols = intersect(names(qb_stats), paste0(names(qb_stats), ".y")),
    ~ coalesce(.x, get(paste0(cur_column(), ".y")))
  )) %>%
  # Remove `.y` columns after `coalesce()`
  select(-ends_with(".y")) %>%
  # Rename columns to remove `.x` suffix
  rename_with(~ sub("\\.x$", "", .), ends_with(".x")) %>%
  select(-ends_with(".x"), -ends_with(".y")) %>%
  arrange(season, week, player_display_name) %>%
  relocate(player_id, player_display_name, recent_team, season, week, game_id, opponent_team, game_date) %>%
  # Calculate passer rating for each player in the dataset
  mutate(
    total_fumbles = coalesce(sack_fumbles, 0) + coalesce(rushing_fumbles, 0),
    completion_percentage = completions / pass_attempts,  # Completion Percentage
    yards_per_attempt = passing_yards / pass_attempts,  # Yards per Attempt
    touchdown_pct = passing_tds / pass_attempts,  # Touchdown Percentage
    interception_pct = interceptions / pass_attempts,  # Interception Percentage

    # Passer rating components
    C = pmax(0, pmin((completion_percentage - 0.3) * 5, 2.375)),
    Y = pmax(0, pmin((yards_per_attempt - 3) * 0.25, 2.375)),
    t = pmax(0, pmin(touchdown_pct * 20, 2.375)),
    I = pmax(0, pmin(2.375 - (interception_pct * 25), 2.375)),

    # Update passer_rating only where it is NA
    passer_rating = coalesce(
      passer_rating,  # Keep existing values if not NA
      ((C + Y + t + I) / 6) * 100  # Fill NA with calculated value
    )
  ) %>%
  select(-C, -Y, -t, -I) %>% # Remove intermediate columns
  # Step 3
  select(where(~ !all(is.na(.)))) %>%
  mutate(
    # Impute completion_percentage using completions and pass_attempts
    completion_percentage = ifelse(
      is.na(completion_percentage) & pass_attempts > 0,
      completions / pass_attempts,
      completion_percentage
    ),
    
    # Impute yards_per_attempt using passing_yards and pass_attempts
    yards_per_attempt = ifelse(
      is.na(yards_per_attempt) & pass_attempts > 0,
      passing_yards / pass_attempts,
      yards_per_attempt
    ),
    
    # Impute touchdown_pct using passing_tds and pass_attempts
    touchdown_pct = ifelse(
      is.na(touchdown_pct) & pass_attempts > 0,
      passing_tds / pass_attempts,
      touchdown_pct
    ),
    
    # Impute interception_pct using interceptions and pass_attempts
    interception_pct = ifelse(
      is.na(interception_pct) & pass_attempts > 0,
      interceptions / pass_attempts,
      interception_pct
    ),
    # Impute passing_air_yards and passing_yards_after_catch
    passing_air_yards = ifelse(
      is.na(passing_air_yards) & !is.na(passing_yards_after_catch),
      passing_yards - passing_yards_after_catch,
      passing_air_yards
    ),
    passing_yards_after_catch = ifelse(
      is.na(passing_yards_after_catch) & !is.na(passing_air_yards),
      passing_yards - passing_air_yards,
      passing_yards_after_catch
    ),
    
    # Impute completion_percentage_above_expectation
    completion_percentage_above_expectation = ifelse(
      is.na(completion_percentage_above_expectation) & !is.na(completion_percentage) 
      & !is.na(expected_completion_percentage),
      completion_percentage - expected_completion_percentage,
      completion_percentage_above_expectation
    ),
    
    # Impute passing_2pt_conversions
    passing_2pt_conversions = ifelse(
      is.na(passing_2pt_conversions) & !is.na(passing_epa),
      ifelse(passing_epa > 0, 1, 0),  # Assume conversion if EPA > 0
      passing_2pt_conversions
    ),
    
    # Impute rushing_epa
    rushing_epa = ifelse(
      is.na(rushing_epa) & rushing_yards > 0,
      rushing_yards + 6 * rushing_tds - 3 * rushing_fumbles,  # Example weights
      rushing_epa
    ),
    
    # Impute qbr_total using qbr_raw
    qbr_total = ifelse(
      is.na(qbr_total) & !is.na(qbr_raw),
      qbr_raw * 1.1,  # Example scaling factor
      qbr_total
    ),
    passing_epa = ifelse(
      is.na(passing_epa), 
      passing_yards + 6 * passing_tds - 3 * interceptions, passing_epa),
      pacr = ifelse(is.na(pacr), 
      passing_yards / passing_air_yards, 
      pacr
      ),
    passing_drops = ifelse(
      is.na(passing_drops), 
      0, 
      passing_drops
      ),
    passing_drop_pct = ifelse(
      is.na(passing_drop_pct), 
      0, 
      passing_drop_pct
      ),
    recent_team = ifelse(
      is.na(
        recent_team), 
      ifelse(
        opponent_team == home_team, 
        away_team, 
        home_team),
      recent_team
      )
) %>%
  mutate(across(
    contains("rush"),
    ~ ifelse(rush_attempts == 0, 0, .),
    .names = "{.col}"
  )) %>%
  filter(pass_attempts + rush_attempts >= 20 | qb_plays >= 20)


# Dynamically identify percentage columns
percentage_columns <- colnames(qb_stats)[str_detect(colnames(qb_stats), regex("percent|pct|percentage", ignore_case = TRUE))]

# Define a function to standardize a column
standardize_percentage <- function(col) {
  if (any(abs(col) > 1, na.rm = TRUE)) {
    return(col / 100)  # Scale entire column if any value > 1
  }
  return(col)  # Leave column unchanged if already in decimal format
}

# Apply the function to percentage columns
qb_stats <- qb_stats %>%
  mutate(across(all_of(percentage_columns), standardize_percentage),
         passing_air_yards_per_attempt = passing_air_yards/pass_attempts)
```

## Data Cleaning

```{r}
# Specify imputation methods for the columns
mean_impute <- c(
  "avg_time_to_throw", "avg_completed_air_yards", "avg_intended_air_yards", 
  "avg_air_yards_differential", "avg_air_distance", "max_air_distance", 
  "completion_percentage_above_expectation",
  "passing_bad_throws", "times_blitzed", "times_hurried", "times_hit",
  "times_pressured", "rushing_yards_before_contact", "rushing_yards_after_contact", 
  "rushing_broken_tackles", "rushing_yards_before_contact_avg", "rushing_yards_after_contact_avg", "max_completed_air_distance", "avg_air_yards_to_sticks", "times_pressured_pct", "expected_completion_percentage", "aggressiveness", "passing_bad_throw_pct"
)

median_impute <- c(
  "qbr_total", "epa_total", "epa_pass", "epa_run", "epa_sack", "epa_penalty",
  "qbr_raw", "qb_plays", "pts_added", "yards_per_attempt", "touchdown_pct", "interception_pct"
)

qb_stats <- qb_stats %>%
  group_by(player_display_name) %>%
  mutate(across(all_of(mean_impute), ~ ifelse(is.na(.), mean(., na.rm = TRUE), .))) %>%  # Mean Imputation
  mutate(across(all_of(median_impute), ~ ifelse(is.na(.), median(., na.rm = TRUE), .))) %>%  # Median Imputation
  ungroup()

sum(is.na(qb_stats))

write_parquet(qb_stats, "qb_stats_cleaned.parquet")
```

### Adding Upcoming Games

```{r}
# Create Gamelogs of Upcoming Week to add to qb_stats
# Step 1: Load the schedule for the current season
schedule <- load_schedules(seasons = most_recent_season(T)) # Adjust season as needed

# Step 2: Filter for upcoming games
upcoming_games <- schedule %>%
  select(game_id, season, week, home_team, away_team, gameday, away_qb_name, away_qb_id, home_qb_name, home_qb_id)

# Step 3: Load player roster data
roster <- load_rosters_weekly(seasons = most_recent_season(T)) # Adjust season as needed

# Step 4: Filter for quarterbacks
qb_roster <- roster %>%
  filter(position == "QB") %>%
  select(full_name, team, season, week, headshot_url) %>%
  rename(player_name = full_name)

# Step 5: Find the closest upcoming game's week
closest_upcoming_game <- upcoming_games %>%
  filter(gameday >= Sys.Date()) %>%
  arrange(gameday) %>%
  slice(1) # Select the closest game

# Extract the week of the closest upcoming game
upcoming_week <- closest_upcoming_game$week

# Step 6: Filter games for the same week
current_week_games <- upcoming_games %>%
  filter(week == upcoming_week)

# Step 7: Create home QB gamelog
home_gamelog <- current_week_games %>%
  transmute(
    game_id = game_id,
    season,
    week,
    team = home_team,
    opponent = away_team,
    qb_name = home_qb_name,
    qb_id = home_qb_id,
    home_away = "home",
    game_date = gameday
  )

# Step 8: Create away QB gamelog
away_gamelog <- current_week_games %>%
  transmute(
    game_id = game_id,
    season,
    week,
    team = away_team,
    opponent = home_team,
    qb_name = away_qb_name,
    qb_id = away_qb_id,
    home_away = "away",
    game_date = gameday
  )

# Step 9: Combine and ensure no duplicates
qb_gamelog <- bind_rows(home_gamelog, away_gamelog) %>%
  distinct() %>%  # Remove duplicates, if any
  left_join(
    qb_roster,
    by = c("qb_name" = "player_name", "team" = "team", "season", "week")
  ) %>%
  select(qb_name, qb_id, team, opponent, season, week, game_date, game_id) %>%  # Final column selection
  distinct() %>%
  arrange(week, qb_name) %>%
  mutate(across(qb_name, clean_player_names),
         across(c(team, opponent), clean_team_abbrs)) %>%
  rename(player_display_name = qb_name,
         recent_team = team,
         opponent_team = opponent,
         player_id = qb_id)

qb_stats_new <- qb_stats %>%
  bind_rows(qb_gamelog)
```

```{r, warning=FALSE, message=FALSE}
# Set columns to do rolling avg on
rolling_avg_columns <- qb_stats_new %>%
  select(where(~ !all(is.na(.)))) %>%
  select(-where(is.character), -season, -week, -years_exp, -entry_year, -birth_date) %>%
  colnames()

# Columns to retain
retain_columns <- readRDS("retain_columns.rds")

# Define a named vector of stadium-to-surface mapping
stadium_surface_mapping <- readRDS("stadium_surface_mapping.rds")
```

### Final QB Stats

```{r, warning=FALSE, message=FALSE}
# Rookie baseline for when QBs have no prior data
rookie_baseline <- qb_stats_new %>%
  filter(years_exp == 0) %>%
  summarize(across(all_of(rolling_avg_columns), ~ mean(., na.rm = TRUE), .names = "rookie_baseline_{col}"))

# Consolidate preprocessing and calculations
qb_stats_final_new <- qb_stats_new %>%
  # Remove columns where all values are NA
  select(where(~ !all(is.na(.)))) %>%
  # Apply rolling averages
  group_by(player_display_name) %>%
  arrange(season, week, game_date, .by_group = TRUE) %>%
  mutate(
    # Rolling averages
    across(
      all_of(rolling_avg_columns),
      ~ rollapply(.x, width = 3, FUN = mean, fill = NA, align = "right", partial = TRUE),
      .names = "rolling_{col}"
    ),
    # Lags for rolling averages
    across(rolling_avg_columns, ~ lag(.x, n = 1), .names = "lag_{.col}")
  ) %>%
  ungroup() %>%
  # Handle rookies with no prior data
  left_join(rookie_baseline, by = character()) %>%  # Join rookie baseline values
  mutate(
    across(
      starts_with("rolling_"),
      ~ ifelse(is.na(.) & years_exp == 0, get(paste0("rookie_baseline_", cur_column())), .)),
    across(rolling_avg_columns, ~ lag(.x, n = 1), .names = "lag_{.col}")) %>%
  # Fill missing rolling averages and lags for qb_gamelog rows
  fill(starts_with("rolling_"), starts_with("lag_"), .direction = "down") %>%
  ungroup() %>%
  # Fill NA values for team columns
  mutate(
    away_team = if_else(is.na(away_team) & !is.na(game_id), 
                        str_extract(game_id, "(?<=_)[A-Z]{2,3}(?=_[A-Z]{2,3}$)"), 
                        away_team),
    home_team = if_else(is.na(home_team) & !is.na(game_id), 
                        str_extract(game_id, "(?<=_)[A-Z]{2,3}$"), 
                        home_team),
    opponent_team = if_else(is.na(opponent_team), "MIA", opponent_team),
  ) %>%
  
  # Create home/away indicator
  mutate(
    home_away = case_when(
      recent_team == away_team ~ "Away",
      recent_team == home_team ~ "Home",
      TRUE ~ NA_character_
    ),
    # Calculate age as of the game date
    age = as.integer(floor(interval(birth_date, game_date) / years(1))),
    coach = case_when(
      recent_team == home_team ~ home_coach,
      recent_team == away_team ~ away_coach
    ),
    opponent_coach = case_when(
      opponent_team == home_team ~ home_coach,
      opponent_team == away_team ~ away_coach
    )
  ) %>%
    mutate(home_away = case_when(
      is.na(home_away) & recent_team == "LV" & 
        str_detect(game_id, "(?<=_)[A-Z]{2,3}(?=_)") == "OAK" ~ "Away",
      is.na(home_away) & recent_team == "LV" ~ "Home",
      TRUE ~ home_away),) %>%
  select(-home_coach, -away_coach, -home_team, -away_team, -entry_year, -years_exp) %>% 
  # Clean and standardize the weather and surface
  mutate(
    surface = case_when(
      game_id == "2020_17_BAL_CIN" ~ "fieldturf",
      is.na(surface) & stadium == "Commanders Field " ~ "grass",
      surface == "" ~ NA_character_,
      surface == "grass " ~ "grass",
      TRUE ~ surface
    ),
    surface = ifelse(is.na(surface), stadium_surface_mapping[stadium], surface)) %>%
  mutate(surface = if_else(is.na(surface), lag(surface, order_by = game_date), surface)) %>%
  ungroup() %>%
  # Apply special rule for Commanders Field
  mutate(
    surface = if_else(is.na(surface) & stadium == "Commanders Field", "grass", surface)
  ) %>%
  # Round all numeric columns
  mutate(across(where(is.numeric), ~ round(.x, 2))) %>%
  select(all_of(retain_columns), starts_with("lag_"), starts_with("rolling_")) %>%
  filter(season > 2017) %>%
  mutate(
  # Fill missing season_type
  season_type = if_else(
    is.na(season_type) & season >= 2021 & week > 18, 
    "POST", 
    if_else(is.na(season_type), "REG", season_type)
  )) %>%
  
  # Extract the string after the third underscore in game_id for matching
    # Extract the string after the third underscore in game_id for matching
  mutate(
    location_key = str_extract(game_id, "(?<=_)[^_]+$")
  ) %>%
  # Fill missing stadium, surface, and roof based on group logic
  group_by(location_key) %>%
  arrange(game_date, .by_group = TRUE) %>%
  mutate(
    stadium = if_else(is.na(stadium), lag(stadium), stadium),
    surface = if_else(is.na(surface), lag(surface), surface),
    roof = if_else(is.na(roof), lag(roof), roof)
  ) %>%
  ungroup()

qb_stats_final_new <- qb_stats_final_new %>%
  # Additional fill logic for missing stadium, surface, and roof using string search
  rowwise() %>%
  mutate(
    stadium = if_else(
      is.na(stadium),
      qb_stats_final_new$stadium[str_detect(qb_stats_final_new$game_id, paste0(".*_", location_key, "$")) & !is.na(qb_stats_final_new$stadium)][1],
      stadium
    ),
    surface = if_else(
      is.na(surface),
      qb_stats_final_new$surface[str_detect(qb_stats_final_new$game_id, paste0(".*_", location_key, "$")) & !is.na(qb_stats_final_new$surface)][1],
      surface
    ),
    roof = if_else(
      is.na(roof),
      qb_stats_final_new$roof[str_detect(qb_stats_final_new$game_id, paste0(".*_", location_key, "$")) & !is.na(qb_stats_final_new$roof)][1],
      roof
    )
  ) %>%
  ungroup() %>%
  # Fill missing age
  group_by(player_display_name, season) %>%
  arrange(week, game_date, .by_group = TRUE) %>%
  mutate(
    age = if_else(is.na(age), lag(age), age)
  ) %>%
  ungroup() %>%
  # Remove the temporary location_key column
  select(-location_key)

write_parquet(qb_stats_final_new, "qb_stats_final_new.parquet")
```

## Team Defense Stats

```{r, warning=FALSE, message=FALSE}
# Load weekly defensive player stats
defense <- load_player_stats(2017:most_recent_season(T), "defense") %>%
  select(-season_type, -player_id, -position_group, -position, -headshot_url, -player_name) %>%
  rename(recent_team = team) %>%
  mutate(
    across(player_display_name, clean_player_names),
    across(recent_team, clean_team_abbrs)
  )

# Load advanced defensive player stats
adv_def <- load_pfr_advstats(2018:most_recent_season(T), stat_type = "def", summary_level = "week") %>%
  select(where(~ !all(is.na(.))), -game_type, -pfr_player_id, -pfr_game_id, -game_id, -opponent) %>%
  rename(player_display_name = pfr_player_name,
           recent_team = team) %>%
  mutate(
      across(c(player_display_name), clean_player_names),
      across(recent_team, clean_team_abbrs))

# Defense
defense_stats <- defense %>%
  full_join(adv_def, by = c("season", "week", "player_display_name", "recent_team"))

defense_stats <- defense_stats %>%
  mutate(
    across(
    .cols = intersect(names(defense_stats), paste0(names(defense_stats), ".y")),
    ~ coalesce(.x, get(paste0(cur_column(), ".y"))))) %>%
    # Remove `.y` columns after `coalesce()`
  select(-ends_with(".y")) %>%
  # Rename columns to remove `.x` suffix
  rename_with(~ sub("\\.x$", "", .), ends_with(".x")) %>%
  select(-ends_with(".x"), -ends_with(".y")) %>%
  arrange(season, week, player_display_name) %>%
  relocate(player_display_name, recent_team, season, week)

zero_impute_def <- c(
  "def_tackles", "def_tackles_solo", "def_tackles_with_assist", "def_tackle_assists",
  "def_tackles_for_loss", "def_tackles_for_loss_yards", "def_fumbles_forced", 
  "def_sacks", "def_sack_yards", "def_qb_hits", "def_interceptions", 
  "def_interception_yards", "def_pass_defended", "def_tds", "def_fumbles", 
  "def_fumble_recovery_own", "def_fumble_recovery_yards_own", 
  "def_fumble_recovery_opp", "def_fumble_recovery_yards_opp", 
  "def_safety", "def_penalty", "def_penalty_yards", "def_ints"
)

mean_impute_def <- c(
  "def_completion_pct", "def_yards_allowed_per_cmp", 
  "def_yards_allowed_per_tgt", "def_passer_rating_allowed", 
  "def_adot", "def_air_yards_completed", "def_yards_after_catch", 
  "def_missed_tackle_pct"
)

median_impute_def <- c(
  "def_targets", "def_completions_allowed", "def_yards_allowed", 
  "def_receiving_td_allowed", "def_times_blitzed", "def_times_hurried", 
  "def_times_hitqb", "def_pressures", "def_tackles_combined", 
  "def_missed_tackles"
)


defense_stats <- defense_stats %>%
  group_by(player_display_name) %>%
  mutate(
    # Zero Imputation
    across(
      all_of(zero_impute_def),
      ~ ifelse(is.na(.), 0, .)
    ),
    
    # Mean Imputation (fallback to 0 if mean cannot be computed)
    across(
      all_of(mean_impute_def),
      ~ ifelse(is.na(.), 
               ifelse(is.nan(mean(., na.rm = TRUE)) | is.infinite(mean(., na.rm = TRUE)), 0, mean(., na.rm = TRUE)), 
               .)
    ),
    
    # Median Imputation (fallback to 0 if median cannot be computed)
    across(
      all_of(median_impute_def),
      ~ ifelse(is.na(.), 
               ifelse(is.nan(median(., na.rm = TRUE)) | is.infinite(median(., na.rm = TRUE)), 0, median(., na.rm = TRUE)), 
               .)
    )
  ) %>%
  ungroup() %>%
  # Final fallback for any remaining NA values
  mutate(across(where(is.numeric), ~ ifelse(is.na(.), 0, .)))

write_parquet(defense_stats, "defense_stats_cleaned.parquet")
```

```{r}
# Calculate rolling averages and drop original columns
defense_stats_cleaned <- defense_stats %>%
  arrange(recent_team, season, week) %>%
  # Exclude specific columns from summation
  select(-player_display_name) %>%
  group_by(recent_team, season, week) %>%
  summarise(
    across( where(is.numeric), sum, .names = "{col}", na.rm = TRUE), 
    .groups = "drop") %>%
  ungroup() %>%
  rename(opponent_team = recent_team)

write_parquet(defense_stats_cleaned, "defense_stats_cleaned.parquet")
```

### Aggregating

```{r, warning=FALSE, message=FALSE}
# Select relevant columns from qb_gamelog
qb_gamelog_subset <- qb_gamelog %>%
  select(season, week, recent_team, opponent_team)

# Calculate rolling averages and drop original columns
def_stats.opp_new <- defense_stats %>%
  bind_rows(qb_gamelog_subset) %>%
  arrange(recent_team, season, week) %>%
  # Exclude specific columns from summation
  select(-player_display_name) %>%
  group_by(recent_team, season, week) %>%
  summarise(
    across( where(is.numeric), sum, .names = "{col}", na.rm = TRUE), 
    .groups = "drop") %>%
  ungroup() %>%
  group_by(recent_team) %>%
  # Apply rolling means to summed columns (excluding specific ones)
  mutate(
    across(
      where(is.numeric),
      ~ rollapply(.x, width = 3, FUN = mean, fill = NA, align = "right", partial = TRUE),
      .names = "rolling_{col}"
    )
  ) %>%
  # Apply lagging to summed columns (excluding specific ones)
  mutate(
    across(
      where(is.numeric) & !starts_with("rolling_"),
      ~ lag(.x, n = 1),
      .names = "lag_{col}"
    )
  ) %>%
  ungroup() %>%
  # Keep only lagged and rolling columns
  select(season, week, recent_team, starts_with("lag_"), starts_with("rolling_"), -lag_week, -rolling_week, -lag_season, -rolling_season) %>%
  filter(season >= 2018) %>%
  rename(opponent_team = recent_team)

write_parquet(def_stats.opp_new, "opp_def_stats_new.parquet")
```

## Joining QBs and Opponent Defense Stats

```{r, warning=FALSE, message=FALSE}
def_stats.opp_new <- read_parquet("opp_def_stats_new.parquet")
qb_stats_final_new <- read_parquet("qb_stats_final_new.parquet")

gamelogs_dashboard <- qb_stats_final_new %>%
  left_join(def_stats.opp_new, by = c("season", "week", "opponent_team")) %>%
  rename(team = recent_team,
         opponent = opponent_team,
         player_name = player_display_name) %>%
  select(-rolling_fantasy_points, -rolling_fantasy_points_ppr)

write_parquet(gamelogs_dashboard, "qb_gamelogs_dashboard.parquet")
```

## Filtering for Temporal Split

```{r, warning=FALSE, message=FALSE}
gamelogs_dashboard <- read_parquet("qb_gamelogs_dashboard.parquet")

# Find the closest upcoming game
current_week_games <- gamelogs_dashboard %>%
  filter(game_date >= Sys.Date()) %>%
  arrange(game_date) %>%
  mutate(upcoming_week = first(week)) %>%
  filter(week == upcoming_week)
```

```{r}
gamelogs <- read_parquet("qb_gamelogs_new.parquet") %>%
  arrange(game_date, game_id, season, week, player_name) %>%
  mutate(rushing_yards = ifelse(rushing_yards < 0, 0, rushing_yards),
         rolling_rushing_yards = ifelse(rolling_rushing_yards < 0, 0, rolling_rushing_yards)) %>%
  select(-rolling_def_ints)


set.seed(6341)
# Create a single split for the dataset
player_splits <- make_splits(
  gamelogs %>% filter(season < most_recent_season(T)-1),
  gamelogs %>% filter(season >= most_recent_season(T)-1)
)

# Extract training and testing datasets
player_train <- training(player_splits)
player_test <- testing(player_splits)
```

```{r}
linear_results_new <- readRDS("linear_results_new.rds")
elastic_net_results <- readRDS("elastic_net_results.rds")

# Put response variables in a vector
response_vars <- c("pass_attempts", "completions", "passing_yards", 
                   "rush_attempts", "rushing_yards", "passing_tds", 
                   "interceptions", "rushing_tds")

response_workflows <- lapply(response_vars, function(resp) {
  workflow <- if (resp == "passing_yards") {
    linear_results_new[[resp]]$workflow
  } else {
    elastic_net_results[[resp]]$workflow
  }
  
  # Train the workflow using the full dataset (adjust `player_train` as needed)
  fit(workflow, data = player_train)
})

# Name the list with the response variable names
names(response_workflows) <- response_vars

# Function to generate predictions for a specific response variable
predict_for_response <- function(response_var, workflows, new_data) {
  # Extract the trained workflow for the response variable
  workflow <- workflows[[response_var]]
  
  # Generate predictions using the trained workflow
  predict(workflow, new_data = new_data) %>%
    pull(.pred) # Extract the prediction column as a vector
}

# Iterate over all response variables and add predictions to qb_gamelog
current_week_preds <- current_week_games

for (resp in names(response_workflows)) {
  current_week_preds <- current_week_preds %>%
    mutate(
      !!paste0("pred_", resp) := pmax(
        0,  # Ensure minimum value is 0
        round(predict_for_response(resp, response_workflows, .), 1)  # Round to 1 decimal place
      )
    )
}

headshots <- load_rosters_weekly(most_recent_season(T)) %>%
  filter(position == "QB") %>%
  select(full_name, team, headshot_url) %>%
  rename(player_name = full_name) %>%
  mutate(across(player_name, clean_player_names),
         across(team, clean_team_abbrs)) %>%
  distinct(player_name, team, .keep_all = TRUE)

current_week_preds <- current_week_preds %>%
  left_join(headshots, by = c("player_name", "team"))

current_week_preds <- current_week_preds %>%
  select(player_name, team, opponent, game_date, home_away, starts_with("pred_"), headshot_url)

# View the updated qb_gamelog with predictions
head(current_week_preds)
teams_logos <- load_teams(current = TRUE)
write_parquet(teams_logos, "teams_logos.parquet")
write_parquet(current_week_preds, "current_week_preds.parquet")
```

## Raw Data Joined

```{r}
qb_stats_cleaned <- read_parquet("qb_stats_cleaned.parquet")
defense_stats_cleaned <- read_parquet("defense_stats_cleaned.parquet")

raw_gamelogs <- qb_stats_cleaned %>%
  left_join(defense_stats_cleaned, by = c("season", "week", "opponent_team")) %>%
  rename(team = recent_team,
         opponent = opponent_team,
         player_name = player_display_name) %>%
  select(-home_team, -away_team, -home_coach, -away_coach)

write_parquet(raw_gamelogs, "raw_gamelogs.parquet")
```

```{r}

```
